Rem
Rem  install_scripts
Rem
  CREATE TABLE "GITHUB_REPOSITORY" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"IS_PRIVATE" VARCHAR2(10 CHAR) COLLATE "USING_NLS_COMP", 
	"CREATED_DATE" TIMESTAMP (6), 
	"CREATED_BY" VARCHAR2(100 CHAR) COLLATE "USING_NLS_COMP", 
	"UPDATED_BY" VARCHAR2(100 CHAR) COLLATE "USING_NLS_COMP", 
	"UPDATED_DATE" TIMESTAMP (6), 
	"UNIQUE_CODE" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"REPO_NAME" CLOB COLLATE "USING_NLS_COMP", 
	"DESCRIPTION" CLOB COLLATE "USING_NLS_COMP", 
	"TEST" VARCHAR2(1000) COLLATE "USING_NLS_COMP", 
	 CONSTRAINT "GITHUB_REPOSITORY_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP" ;

  CREATE TABLE "GITHUB_BRANCH" 
   (	"BRANCH_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"GITHUB_REPOSITORY_ID" NUMBER, 
	"BRANCH_NAME" VARCHAR2(100 CHAR) COLLATE "USING_NLS_COMP", 
	 CONSTRAINT "GITHUB_BRANCH_PK" PRIMARY KEY ("BRANCH_ID")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP" ;

  CREATE TABLE "GITHUB_CREDENTIALS" 
   (	"GITHUB_ID" NUMBER, 
	"CREDENTIAL_NAME" VARCHAR2(50 CHAR) COLLATE "USING_NLS_COMP", 
	"USERNAME" VARCHAR2(100 CHAR) COLLATE "USING_NLS_COMP", 
	"PRIVATE_KEY" VARCHAR2(100 CHAR) COLLATE "USING_NLS_COMP", 
	"CREATED_BY" VARCHAR2(100 CHAR) COLLATE "USING_NLS_COMP", 
	"CREATED_DATE" TIMESTAMP (6), 
	"UPDATED_BY" VARCHAR2(100 CHAR) COLLATE "USING_NLS_COMP", 
	"UPDATED_DATE" TIMESTAMP (6), 
	"STATUS" VARCHAR2(50 CHAR) COLLATE "USING_NLS_COMP", 
	"REPO_HANDLE" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	"REPO_OWNER" VARCHAR2(100) COLLATE "USING_NLS_COMP", 
	 CONSTRAINT "GITHUB_CREDENTIALS_PK" PRIMARY KEY ("GITHUB_ID")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP" ;

  CREATE TABLE "GITHUB_REPOSITORY_FOLDER" 
   (	"FOLDER_ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"GITHUB_REPOSITORY_ID" NUMBER, 
	"FOLDER_NAME" VARCHAR2(100 CHAR) COLLATE "USING_NLS_COMP", 
	"DESCRIPTION" VARCHAR2(200) COLLATE "USING_NLS_COMP", 
	 CONSTRAINT "GITHUB_REPOSITORY_FOLDER_PK" PRIMARY KEY ("FOLDER_ID")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP" ;

  CREATE OR REPLACE EDITIONABLE TRIGGER "BI_GITHUB_CREDENTIALS" 
  before insert or update on "GITHUB_CREDENTIALS"               
  for each row  
begin   

  if :NEW."GITHUB_ID" is null then 
    select "GITHUB_CREDENTIALS_SEQ".nextval into :NEW."GITHUB_ID" from sys.dual; 
  end if; 

    if inserting then  
        :new.CREATED_BY :=  nvl(v('APP_USER'),user);  
        :new.CREATED_DATE := current_timestamp; 
        :new.STATUS := 'Active';
       
  end if;  

  if updating then  
        :new.UPDATED_BY := nvl(v('APP_USER'),user);  
        :new.UPDATED_DATE := current_timestamp;  
  end if;

end;
/
ALTER TRIGGER "BI_GITHUB_CREDENTIALS" ENABLE;

  CREATE OR REPLACE EDITIONABLE TRIGGER "BI_GITHUB_REPOSITORY" 
  before insert or update on "GITHUB_REPOSITORY"               
  for each row  
begin   

    if inserting then  
        :new.CREATED_BY :=  nvl(v('APP_USER'),user);  
        :new.CREATED_DATE := current_timestamp; 
  end if;  

  if updating then  
        :new.UPDATED_BY := nvl(v('APP_USER'),user);  
        :new.UPDATED_DATE := current_timestamp;  
  end if;

end;
/
ALTER TRIGGER "BI_GITHUB_REPOSITORY" ENABLE;

  ALTER TABLE "GITHUB_REPOSITORY_FOLDER" ADD CONSTRAINT "GITHUB_REPOSITORY_FOLDER_CON" FOREIGN KEY ("GITHUB_REPOSITORY_ID")
	  REFERENCES "GITHUB_REPOSITORY" ("ID") ENABLE;

  CREATE UNIQUE INDEX "GITHUB_BRANCH_PK" ON "GITHUB_BRANCH" ("BRANCH_ID") 
  ;

  CREATE UNIQUE INDEX "GITHUB_CREDENTIALS_PK" ON "GITHUB_CREDENTIALS" ("GITHUB_ID") 
  ;

  CREATE UNIQUE INDEX "GITHUB_REPOSITORY_FOLDER_PK" ON "GITHUB_REPOSITORY_FOLDER" ("FOLDER_ID") 
  ;

  CREATE UNIQUE INDEX "GITHUB_REPOSITORY_PK" ON "GITHUB_REPOSITORY" ("ID") 
  ;




create or replace procedure "DBMS_CLOUD_GITHUB_CREDENTIALS" (
    p_credential_name              in     varchar2,
    p_username                     in     varchar2,
    p_personal_access_token        in     varchar2)
as
begin

-- enter the procedure code here
    DBMS_CLOUD.CREATE_CREDENTIAL (
        p_credential_name, -- Name of the credential
        p_username, -- GITHUB Username
        p_personal_access_token --Personal Access Token from github
    ); 

    
end "DBMS_CLOUD_GITHUB_CREDENTIALS";
/
create or replace PROCEDURE "DBMS_CLOUD_REPO_CREATE_BRANCH" (
    p_repo_name    in     clob,
    p_credential   in     varchar2,
    p_owner        in     varchar2,
    p_branch_name  in     varchar2)
as
     repoHandle clob;
     l_repo_handle varchar2(1000);
begin

    -- enter the procedure code here
  repoHandle := DBMS_CLOUD_REPO.INIT_GITHUB_REPO(
                    credential_name => p_credential, -- Previously created credentials
                    repo_name       => p_repo_name,
                    owner           => p_owner
            );
    
    --DBMS_OUTPUT.PUT_LINE(repoHandle);
   
    ---create a branch repository in Github
        DBMS_CLOUD_REPO.CREATE_BRANCH (
        repo                 => repoHandle,
        branch_name          => p_branch_name,
        parent_branch_name   => 'main'
        );

end "DBMS_CLOUD_REPO_CREATE_BRANCH";
/
create or replace procedure "DBMS_CLOUD_REPO_CREATE_REPO" (
    p_repo_name    in     clob,
    p_credential   in     varchar2,
    p_owner        in     varchar2,
    p_description  in     varchar2 default null,
    p_is_private   in     boolean default FALSE,
    p_unique_code  in     varchar2)
as
     repoHandle clob;
     l_repo_handle varchar2(1000);
     l_schema varchar2(100);
begin

    select sys_context( 'userenv', 'current_schema' ) into l_schema from dual;

    -- enter the procedure code here
  repoHandle := DBMS_CLOUD_REPO.INIT_GITHUB_REPO(
                    credential_name => p_credential, -- Previously created credentials
                    repo_name       => p_repo_name,
                    owner           => p_owner
            );
    
    --DBMS_OUTPUT.PUT_LINE(repoHandle);

    ---create repository in Github
   DBMS_CLOUD_REPO.CREATE_REPOSITORY(
        repo        => repoHandle,
        description => p_description,
        private => p_is_private --TRUE for a Private repository
   );


   --Initialization of main branch only
        DBMS_CLOUD_REPO.EXPORT_OBJECT(
        repo        => repoHandle,
        object_schema => l_schema,
        object_type => 'TABLE',
        object_name => 'GITHUB_REPOSITORY',
        file_path   => 'Ignore_Folder/repo.sql'
     );

end "DBMS_CLOUD_REPO_CREATE_REPO";
/
create or replace procedure "DBMS_CLOUD_REPO_CREATE_REPO_FOLDER" (
    p_repo_name    in     clob,
    p_credential   in     varchar2,
    p_owner        in     varchar2,
    p_folder_name in      varchar2)
as
     repoHandle clob;
     l_repo_handle varchar2(1000);
begin
    -- enter the procedure code here
  repoHandle := DBMS_CLOUD_REPO.INIT_GITHUB_REPO(
                    credential_name => p_credential, -- Previously created credentials
                    repo_name       => p_repo_name,
                    owner           => p_owner
            );
    
    --DBMS_OUTPUT.PUT_LINE(repoHandle);
   
    ---create folder repository in Github
       DBMS_CLOUD_REPO.EXPORT_OBJECT(
         repo        => repoHandle,
         object_type => 'TABLE',
         object_name => 'GITHUB_REPOSITORY',
         file_path   => p_folder_name||'/'
      );

end "DBMS_CLOUD_REPO_CREATE_REPO_FOLDER";
/
create or replace PROCEDURE "DBMS_CLOUD_REPO_DELETE_BRANCH" (
    p_repo_name    in     clob,
    p_credential   in     varchar2,
    p_owner        in     varchar2,
    p_branch_name  in     varchar2)
as
     repoHandle clob;
     l_repo_handle varchar2(1000);
begin

    -- enter the procedure code here
  repoHandle := DBMS_CLOUD_REPO.INIT_GITHUB_REPO(
                    credential_name => p_credential, -- Previously created credentials
                    repo_name       => p_repo_name,
                    owner           => p_owner
            );
    
    --DBMS_OUTPUT.PUT_LINE(repoHandle);
   
    ---delete a branch repository in Github
        DBMS_CLOUD_REPO.DELETE_BRANCH (
        repo                 => repoHandle,
        branch_name          => p_branch_name
        );

end "DBMS_CLOUD_REPO_DELETE_BRANCH";
/
create or replace procedure "DBMS_CLOUD_REPO_DELETE_REPO" (
    p_repo_name    in     clob,
    p_credential   in     varchar2,
    p_owner        in     varchar2)
as
     repoHandle clob;
     l_repo_handle varchar2(1000);
begin
    -- enter the procedure code here
  repoHandle := DBMS_CLOUD_REPO.INIT_GITHUB_REPO(
                    credential_name => p_credential, -- Previously created credentials
                    repo_name       => p_repo_name,
                    owner           => p_owner
            );
    
    --DBMS_OUTPUT.PUT_LINE(repoHandle);

    ---delete repository in Github
     DBMS_CLOUD_REPO.DELETE_REPOSITORY(
           repo => repoHandle
      );

end "DBMS_CLOUD_REPO_DELETE_REPO";
/
create or replace PROCEDURE "DBMS_CLOUD_REPO_EXPORT_SCHEMA" (
    p_repo_name    in     clob,
    p_credential   in     varchar2,
    p_owner        in     varchar2,
    p_folder_name  in     varchar2,
    p_file_path    in     varchar2,
    p_commit_details in   clob,
    p_branch       in     varchar2)
as
     repoHandle clob;
     l_repo_handle varchar2(1000);
     l_schema varchar2(100);
     l_user varchar2(100);
begin

    --get schema name
    select sys_context( 'userenv', 'current_schema' ) into l_schema from dual;

 


        -- enter the procedure code here
    repoHandle := DBMS_CLOUD_REPO.INIT_GITHUB_REPO(
                        credential_name => p_credential, -- Previously created credentials
                        repo_name       => p_repo_name,
                        owner           => p_owner
                );
        
        --DBMS_OUTPUT.PUT_LINE(repoHandle);
   
 ---export schema to repository in Github
       DBMS_CLOUD_REPO.EXPORT_SCHEMA(
            repo           => repoHandle,
            schema_name    => l_schema,
            file_path      => p_folder_name||'/'||p_file_path||'.sql',
            branch_name    => p_branch,
            commit_details =>'{"message": "'||p_commit_details||'", "author": {"name": "'||v('APP_USER')||'", "email": "'||v('APP_USER')||'" } }'
        );

end "DBMS_CLOUD_REPO_EXPORT_SCHEMA";
/
create or replace PROCEDURE "DBMS_CLOUD_REPO_MOVE_OBJECTS" (
    p_repo_name    in     clob,
    p_credential   in     varchar2,
    p_owner        in     varchar2,
    p_folder_name  in     varchar2,
    p_file_path    in     varchar2,
    p_object_name  in     varchar2,
    p_object_type  in     varchar2,
    p_commit_details in   clob,
    p_branch       in     varchar2)
as
     repoHandle clob;
     l_repo_handle varchar2(1000);
begin
    -- enter the procedure code here
  repoHandle := DBMS_CLOUD_REPO.INIT_GITHUB_REPO(
                    credential_name => p_credential, -- Previously created credentials
                    repo_name       => p_repo_name,
                    owner           => p_owner
            );
    
    --DBMS_OUTPUT.PUT_LINE(repoHandle);
   
    ---create folder repository in Github
       DBMS_CLOUD_REPO.EXPORT_OBJECT(
         repo        => repoHandle,
         object_type => p_object_type,
         object_name => p_object_name,
         file_path   => p_folder_name||'/'||p_file_path||'.sql',
         commit_details => p_commit_details,
         branch_name  => p_branch
      );

end "DBMS_CLOUD_REPO_MOVE_OBJECTS";
/












   CREATE SEQUENCE  "GITHUB_CREDENTIALS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;

   CREATE SEQUENCE  "GITHUB_REPOSITRY_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL ;





















create or replace TRIGGER "BI_GITHUB_CREDENTIALS"   
  before insert or update on "GITHUB_CREDENTIALS"               
  for each row  
begin   

  if :NEW."GITHUB_ID" is null then 
    select "GITHUB_CREDENTIALS_SEQ".nextval into :NEW."GITHUB_ID" from sys.dual; 
  end if; 

    if inserting then  
        :new.CREATED_BY :=  nvl(v('APP_USER'),user);  
        :new.CREATED_DATE := current_timestamp; 
        :new.STATUS := 'Active';
       
  end if;  

  if updating then  
        :new.UPDATED_BY := nvl(v('APP_USER'),user);  
        :new.UPDATED_DATE := current_timestamp;  
  end if;

end;
/
create or replace TRIGGER "BI_GITHUB_REPOSITORY"   
  before insert or update on "GITHUB_REPOSITORY"               
  for each row  
begin   

    if inserting then  
        :new.CREATED_BY :=  nvl(v('APP_USER'),user);  
        :new.CREATED_DATE := current_timestamp; 
  end if;  

  if updating then  
        :new.UPDATED_BY := nvl(v('APP_USER'),user);  
        :new.UPDATED_DATE := current_timestamp;  
  end if;

end;
/ 

